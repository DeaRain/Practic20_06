<?php

namespace app\modules\user\controllers;
use app\models\forms\ArticleForm;
use app\models\ModuleUser;
use app\models\services\ArticleGridService;
use app\models\services\ProfileService;
use Yii;
use app\models\Article;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\UploadedFile;

/**
 * ArticleController implements the CRUD actions for Article model.
 */
class ArticleController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all Article models.
     * @return mixed
     */
    public function beforeAction($action)
    {
        if ((new ProfileService())->isBannedById(\Yii::$app->user->getId())){
            return Yii::$app->response->redirect('/user/profile/index');
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex($active=false,$moder=false)
    {
        $queryFilter = (new ArticleGridService())->getQueryFilter(Yii::$app->user->getId(),$active,$moder);
        $dataProvider = (new ArticleGridService())->getDataProvider($queryFilter);

        return $this->render('index', compact(['dataProvider','active','moder']));
    }
    /**
     * Displays a single Article model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        $article = (new ArticleGridService())->getUserArticle($id, Yii::$app->user->getId());
        if ($article){
            return $this->render('view', [
                'model' => $article,
            ]);
        } else return $this->redirect('/user/article');

    }

    /**
     * Creates a new Article model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $form = new ArticleForm();
        if ($form->load(Yii::$app->request->post())) {
            $form->imageFile = UploadedFile::getInstance($form, 'imageFile');
            $form->photo = (new ArticleGridService())->uploadPhoto($form);
            if ((new ArticleGridService())->save($form)){
                return $this->redirect(['index']);
            }
        }
        return $this->render('create', [
            'model' => $form,
        ]);
    }

    /**
     * Updates an existing Article model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->author==Yii::$app->user->getId()){
            if(Yii::$app->request->isPost){
                $model->imageFile = UploadedFile::getInstance($model, 'imageFile');
                $tempName = $model->uploadPhoto();
            }
            if ($model->load(Yii::$app->request->post())) {
                $model->photo = $tempName;
                if ($model->save()){
                    return $this->redirect(['view', 'id' => $model->id]);
                }
            }
            return $this->render('update', [
                'model' => $model,
            ]);
        } else return $this->redirect('/user/article');





    }

    /**
     * Deletes an existing Article model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {


        $temp = $this->findModel($id);
        if ($temp->author==Yii::$app->user->getId()){
            $this->findModel($id)->delete();

            return $this->redirect(['index']);
        } else return $this->redirect('/user/article');

    }

    /**
     * Finds the Article model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Article the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Article::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
